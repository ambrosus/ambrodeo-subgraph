# Token entity represents each ERC20 token created by the Token Factory
type Token @entity {
  id: ID!                          # Unique identifier (token address)
  creator: User!                   # Reference to the creator (User entity)
  name: String!                    # Token name
  nameLowerCase: String!           # Token name in lower case
  symbol: String!                  # Token symbol
  data: Bytes!                     # URL to the token image
  holders: [Holder!] @derivedFrom(field: "token")
  trades: [Trade!] @derivedFrom(field: "token")
  liquidity: BigInt!               # Liquidity
  totalToken: BigInt!              # The total token sold
  totalAmb: BigInt!                # The total amount of amb spend on the token
  createdAt: BigInt!               # Timestamp of creation
  lastPriceUpdate: BigInt!         # Timestamp of the last price updated
  lastPrice: BigDecimal!           # Last price traded
  totalTrades: BigInt!             # Total trades
  totalHolders: BigInt!            # Total holders
  totalSupply: BigInt!             # Total supply
  onDex: Boolean!                  # Indicates if the token is listed on the DEX
  onDexSince: BigInt               # Timestamp of listing on the DEX
  reachedOneMillions: Boolean!     # Indicates if the token reached 1M in total liquidity
  reachedOneMillionsAt: BigInt     # Timestamp of reaching 1M in total liquidity
  reachedHalfWayToDex: Boolean!    # Indicates if the token reached half way to be listed on the DEX
  reachedHalfWayToDexAt: BigInt    # Timestamp of reaching half way to be listed on the DEX
}

type Platform @entity {
    id: ID!                   # Should always be 1
    totalTokens: BigInt!      # Total tokens created
    totalUsers: BigInt!       # Total users
    totalTrades: BigInt!      # Total trades
    totalLiquidity: BigInt!   # Total liquidity
    totalAmb: BigInt!         # Total AMB spent
    totalTokensOnDex: BigInt! # Total tokens listed on the DEX
}

# The history of abm price in USDC from the Astra Dex
type AmbPrice @entity {
  id: ID!                  # Unique identifier
  price: BigDecimal!       # Price in USDC
  timestamp: BigInt!       # Timestamp of the price
}

# The last amb price in USDC from the Astra Dex
# Used to calculate buy price is USDC
type LastAmbPrice @entity {
  id: ID!                  # Should always be 1
  price: BigDecimal!       # Price in USDC
  timestamp: BigInt!       # Timestamp of the price
}

# User entity represents addresses interacting with the platform
type User @entity {
  id: ID!                          # User address
  tokensCreated: [Token!] @derivedFrom(field: "creator")
  trades: [Trade!] @derivedFrom(field: "user")
  holdings: [Holder!] @derivedFrom(field: "user")
  isInsider: Boolean!              # Indicates if the user is an insider
  totalTokensCreated: BigInt!      # Total tokens created
  totalTrades: BigInt!             # Total trades
}

# Holder entity tracks balances of users for each token
type Holder @entity {
  id: ID!                          # Unique identifier (token address + user address)
  token: Token!                    # Reference to the Token
  user: User!                      # Reference to the User
  balance: BigInt!                 # Current balance
}

# Trade entity captures executed trades between users
type Trade @entity {
  id: ID!                          # Unique trade identifier
  hash: String!                    # Transaction hash
  token: Token!                    # Reference to the Token
  user: User!                      # Buyer in the trade
  amount: BigInt!                  # Amount traded
  amountAmb: BigDecimal!           # Amount traded in AMB
  amountUSDC: BigDecimal!          # Amount traded in USDC
  price: BigDecimal!               # Price per token at execution
  priceUSDC: BigDecimal!           # Price per token in USDC at execution
  fees: BigInt!                    # Fees applied to the trade
  timestamp: BigInt!               # Timestamp of trade execution
  isBuy: Boolean!                  # Indicates if the user is the buyer
}

# Candle entity for time-based aggregations (e.g., hourly, daily)
type Candle @entity {
  id: ID!                          # Unique identifier (token address + interval start time)
  token: Token!                    # Reference to the Token
  interval: String!                # Interval type (e.g., "hourly", "daily")
  startTime: BigInt!               # Start time of the interval
  endTime: BigInt!                 # End time of the interval
  open: BigDecimal!                # Opening price
  high: BigDecimal!                # Highest price in the interval
  low: BigDecimal!                 # Lowest price in the interval
  close: BigDecimal!               # Closing price
  volume: BigInt!                  # Total volume traded
}
